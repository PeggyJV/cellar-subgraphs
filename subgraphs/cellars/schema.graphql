type Platform @entity {
  id: ID! # platform

  latestSnapshotUpdatedAt: Int!
  latestSnapshotUpdatedAtBlock: Int!
}

# Always in USD for now
type TokenPrice @entity {
  id: ID! # <tokenAddress>-<blockNumber>
  address: String!
  block: Int!
  price: BigDecimal!
  decimals: BigDecimal!
}

type Wallet @entity {
  id: ID! # wallet address
  currentDeposits: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  cellarData: [WalletCellarData!]! @derivedFrom(field: "wallet")
  cellarShares: [WalletCellarShare!]! @derivedFrom(field: "wallet")
  dayDatas: [WalletDayData!]! @derivedFrom(field: "wallet")
  balanceChanges: [BalanceChange!]! @derivedFrom(field: "wallet")
}

type BalanceChange @entity {
  id: ID! # txHash-eventIndex
  amount: BigInt!
  date: Int!
  wallet: Wallet!
  cellarAddress: String!
  shares: BigInt!
  shareValue: BigInt!
  kind: String!
}

type WalletCellarData @entity {
  id: ID! # wallet address - cellar address
  wallet: Wallet!
  walletAddress: String!
  currentDeposits: BigInt!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
}

type WalletCellarShare @entity {
  id: ID! # <cellar address>-<user wallet>
  cellar: Cellar!
  wallet: Wallet!  # Account that owns the cellar shares
  balance: BigInt! # Balance of cellar shares in 'wallet'
}

type Cellar @entity {
  id: ID! # contract address
  name: String!
  asset: TokenERC20! # aave contract address

  tvlActive: BigInt!
  tvlInactive: BigInt!
  tvlInvested: BigInt! # amount initially deposited to aave
  tvlTotal: BigInt!

  currentDeposits: BigInt!
  addedLiquidityAllTime: BigInt!
  removedLiquidityAllTime: BigInt!
  numWalletsAllTime: Int!
  numWalletsActive: Int!
  sharesTotal: BigInt!
  shareValue: BigInt!
  shareProfitRatio: BigDecimal!

  depositLimit: BigInt!
  liquidityLimit: BigInt! # Max Deposits

  positions: [String!]!
  positionDistribution: [BigDecimal!]!

  dayDatas: [CellarDayData!]! @derivedFrom(field: "cellar")
}

type CellarDayData @entity {
  id: ID! # timestamp at the start of a day Date.now / 86400
  date: Int! # epoch timestamp
  cellar: Cellar!
  asset: TokenERC20!
  updatedAt: Int!

  addedLiquidity: BigInt!
  removedLiquidity: BigInt!
  numWallets: Int!

  tvlActive: BigInt!
  tvlInactive: BigInt!
  tvlInvested: BigInt!
  tvlTotal: BigInt!

  shareValue: BigInt!
  shareValueHigh: BigInt!
  shareValueLow: BigInt!
  shareProfitRatio: BigDecimal!
  positionDistribution: [BigDecimal!]!

  earnings: BigInt!
}

type CellarHourDataUpdates @entity {
  id: ID! # ??
  date: Int! # epoch timestamp
  cellar: Cellar!
  asset: TokenERC20
  updatedAt: Int!

  addedLiquidity: BigInt!
  removedLiquidity: BigInt!
  numWallets: Int!

  tvlActive: BigInt!
  tvlInactive: BigInt!
  tvlInvested: BigInt!
  tvlTotal: BigInt!

  shareValue: BigInt!
  shareValueHigh: BigInt!
  shareValueLow: BigInt!
  shareProfitRatio: BigDecimal!
  positionDistribution: [BigDecimal!]!

  earnings: BigInt!
}

type CellarDayDataUpdates @entity {
  id: ID! # timestamp at the start of a day Date.now / 86400
  date: Int! # epoch timestamp
  cellar: Cellar!
  asset: TokenERC20!
  updatedAt: Int!

  addedLiquidity: BigInt!
  removedLiquidity: BigInt!
  numWallets: Int!

  tvlActive: BigInt!
  tvlInactive: BigInt!
  tvlInvested: BigInt!
  tvlTotal: BigInt!

  shareValue: BigInt!
  shareValueHigh: BigInt!
  shareValueLow: BigInt!
  shareProfitRatio: BigDecimal!
  positionDistribution: [BigDecimal!]!

  earnings: BigInt!
}

type CellarHourData @entity {
  id: ID! # ??
  date: Int! # epoch timestamp
  cellar: Cellar!
  asset: TokenERC20
  updatedAt: Int!

  addedLiquidity: BigInt!
  removedLiquidity: BigInt!
  numWallets: Int!

  tvlActive: BigInt!
  tvlInactive: BigInt!
  tvlInvested: BigInt!
  tvlTotal: BigInt!

  shareValue: BigInt!
  shareValueHigh: BigInt!
  shareValueLow: BigInt!
  shareProfitRatio: BigDecimal!
  positionDistribution: [BigDecimal!]!

  earnings: BigInt!
}

type WalletDayData @entity {
  id: ID! # timestamp + wallet address
  date: Int! #epoch timestamp
  wallet: Wallet!
  addedLiquidity: BigInt!
  removedLiquidity: BigInt!
}

type TokenERC20 @entity {
  id: ID! # token contract address
  symbol: String!
  decimals: Int!
}
